:-dynamic cells/3,found/1,black/2,sizes/2,vis/3,svis/3,vis1/3,wcs/1,bcs/1,pair/3,pair/2.

p(L,E,In):-findall(vis(X,Y,Z),vis(X,Y,Z),L),nth1(In,L,E),vis(_,_,Bit)=E,(Bit==1,write("1");Bit==0,write("0")).

p:-findall(vis(X,Y,Z),vis(X,Y,Z),L),write(L).
p1:-findall(vis1(X,Y,Z),vis1(X,Y,Z),L),write(L).
p2:-findall(Num,wcs(Num),L),nth1(1,L,X),write(X).
p3:-findall(Num,bcs(Num),L),nth1(1,L,X),write(X).
p4:-findall(cells(X,Y,Z),cells(X,Y,Z),L),write(L).

d:-retractall(vis(X,Y,Z)).
d1:-retractall(vis1(X,Y,Z)).
d2:-retractall(wcs(X)),assert(wcs(0)).
d3:-retractall(bcs(X)),assert(bcs(0)).

find_bit(X,Y,Bit):-findall(Z,vis(X,Y,Z),L),nth0(0,L,Bit).
change_bit(X,Y,Bit):-Bit==0,retract(vis(X,Y,Bit1)),assert(vis(X,Y,0)),!;Bit==1,retract(vis(X,Y,Bit1)),assert(vis(X,Y,1)).
find_bit1(X,Y,Bit):-findall(Z,vis1(X,Y,Z),L),nth0(0,L,Bit).
change_bit1(X,Y,Bit):-Bit==0,retract(vis1(X,Y,Bit1)),assert(vis1(X,Y,0)),!;Bit==1,retract(vis1(X,Y,Bit1)),assert(vis1(X,Y,1)).
increase_white_cell_num():-findall(Num,wcs(Num),L),retractall(wcs(Y)),nth0(0,L,X),X1 is X+1,assert(wcs(X1)).
increase_black_cell_num():-findall(Num,bcs(Num),L),retractall(bcs(Y)),nth0(0,L,X),X1 is X+1,assert(bcs(X1)).
decrease_black_cell_num():-findall(Num,bcs(Num),L),retractall(bcs(Y)),nth0(0,L,X),X1 is X-1,assert(bcs(X1)).


build_vis_array(R,C,Rows,Columns):-R=<Rows,C=<Columns,assert(vis(R,C,0)),C1 is C+1,build_vis_array(R,C1,Rows,Columns);R1 is R+1,Columns1 is Columns,C==Columns1,build_vis_array(R1,1,Rows, Columns).
build_vis1_array(R,C,Rows,Columns):-R=<Rows,C=<Columns,assert(vis1(R,C,0)),C1 is C+1,build_vis1_array(R,C1,Rows,Columns);R1 is R+1,Columns1 is Columns,C==Columns1,build_vis1_array(R1,1,Rows, Columns).
getCellNumber(I,J,Number):-findall(Num,cells(I,J,Num),L),nth0(0,L,Number).


printcoords(I):-findall(pair(I,X,Y),pair(I,X,Y),L),write(L).



getWhiteCellCoords(I,J,CI,CJ,N,M):-
find_bit(CI,CJ,Bit),Bit==0,I is CI,J is CJ,!;
CJ1 is CJ+1,CJ1=<M,getWhiteCellCoords(I,J,CI,CJ1,N,M),!;
CI1 is CI+1,CI1=<N,getWhiteCellCoords(I,J,CI1,1,N,M),!.

                                       
cnt_white_cells(I,J,N,M):-increase_white_cell_num(),change_bit1(I,J,1),fail;
Sonx is I+1,Sony is J+0,Sonx>0,Sonx=<N,Sony>0,Sony=<M,find_bit(Sonx,Sony,Bit0),find_bit1(Sonx,Sony,Bit00),Bit0==0,Bit00==0,cnt_white_cells(Sonx,Sony,N,M),fail;
Sonx1 is I+0,Sony1 is J+1,Sonx1>0,Sonx1=<N,Sony1>0,Sony1=<M,find_bit(Sonx1,Sony1,Bit1),find_bit1(Sonx1,Sony1,Bit11),Bit1==0,Bit11==0,cnt_white_cells(Sonx1,Sony1,N,M),fail;
Sonx2 is I-1,Sony2 is J+0,Sonx2>0,Sonx2=<N,Sony2>0,Sony2=<M,find_bit(Sonx2,Sony2,Bit2),find_bit1(Sonx2,Sony2,Bit22),Bit2==0,Bit22==0,cnt_white_cells(Sonx2,Sony2,N,M),fail;
Sonx3 is I+0,Sony3 is J-1,Sonx3>0,Sonx3=<N,Sony3>0,Sony3=<M,find_bit(Sonx3,Sony3,Bit3),find_bit1(Sonx3,Sony3,Bit33),Bit3==0,Bit33==0,cnt_white_cells(Sonx3,Sony3,N,M),fail.


%..................Are There Similar Cells Numbers In The Same Row Or Column.....................
%(1)

areThereTheSameInRow(I,J,CJ,Target,Acc_sol,M):-
M1 is M+1,CJ==M1,Acc_sol is 1,!;
J==CJ,CJ1 is CJ+1,areThereTheSameInRow(I,J,CJ1,Target,Acc_sol,M),!;
getCellNumber(I,CJ,Number),find_bit(I,CJ,Bit),Number==Target,Bit==0,Acc_sol is 0,!;
M1 is M+1,CJ1 is CJ+1,CJ1=<M1,areThereTheSameInRow(I,J,CJ1,Target,Acc_sol,M).

%(2)
areThereTheSameInColumn(I,J,CI,Target,Acc_sol,N):-
N1 is N+1,CI==N1,Acc_sol is 1,!;
I==CI,CI1 is CI+1,areThereTheSameInColumn(I,J,CI1,Target,Acc_sol,N),!;
getCellNumber(CI,J,Number),find_bit(CI,J,Bit),Number==Target,Bit==0,Acc_sol is 0,!;
N1 is N+1,CI1 is CI+1,CI1=<N1,areThereTheSameInColumn(I,J,CI1,Target,Acc_sol,N).

%(3)
loopOnElements(CI,CJ,Acc_sol,N,M):-
N1 is N+1,CI==N1,Acc_sol is 1,!;
find_bit(CI,CJ,Bit),Bit==1, 
(
CJ1 is CJ+1,CJ1=<M,loopOnElements(CI,CJ1,Acc_sol,N,M),!;
CI1 is CI+1,N1 is N+1,CI1=<N1,loopOnElements(CI1,1,Acc_sol,N,M)
),!;
getCellNumber(CI,CJ,Target),
areThereTheSameInRow(CI,CJ,1,Target,Acc_sol1,M),
areThereTheSameInColumn(CI,CJ,1,Target,Acc_sol2,N),
Acc_sol1==1,Acc_sol2==1,
(
CJ1 is CJ+1,CJ1=<M,loopOnElements(CI,CJ1,Acc_sol,N,M),!;
CI1 is CI+1,N1 is N+1,CI1=<N1,loopOnElements(CI1,1,Acc_sol,N,M)
),!;
Acc_sol is 0,!.
%................................................................................................


%..................Are There Two Black Cells Next To EachOther...................................

loopOnElements1(CI,CJ,Acc_sol,N,M):-
N1 is N+1,CI==N1,Acc_sol is 1,!;
find_bit(CI,CJ,Bit),
CI1 is CI+1,CI1=<N,find_bit(CI1,CJ,Bit1),
Bit==1,Bit1==1,Acc_sol is 0,!;
find_bit(CI,CJ,Bit),
CJ1 is CJ+1,CJ1=<M,find_bit(CI,CJ1,Bit1),
Bit==1,Bit1==1,Acc_sol is 0,!;
CJ1 is CJ+1,CJ1=<M,loopOnElements1(CI,CJ1,Acc_sol,N,M),!;
CI1 is CI+1,N1 is N+1,CI1=<N1,loopOnElements1(CI1,1,Acc_sol,N,M).

%................................................................................................

printSolution(I,J,N,M):-
I=<N,J=<M,findall(Bitx,svis(I,J,Bitx),L),nth1(1,L,Bit),getCellNumber(I,J,Number),
( Bit==0,write('W'),!;write('B')),write('('),write(Number),write(') '),
J1 is J+1,(printSolution(I,J1,N,M);!),
I1 is I+1,J==M,nl,printSolution(I1,1,N,M).

printSolution1(I,J,N,M):-
I=<N,J=<M,find_bit(I,J,Bit),getCellNumber(I,J,Number),
( Bit==0,write('W'),!;write('B') ),write('('),write(Number),write(') '),
J1 is J+1,(printSolution1(I,J1,N,M);!),
I1 is I+1,J==M,nl,printSolution1(I1,1,N,M).

storeSolution(I,J,N,M):-
I=<N,J=<M,find_bit(I,J,Bit),
assert(svis(I,J,Bit)),
(Bit==1,assert(black(I,J)),!;!),
J1 is J+1,(storeSolution(I,J1,N,M);!),
I1 is I+1,J==M,storeSolution(I1,1,N,M).

checkSolution(N,M):-
getWhiteCellCoords(I,J,1,1,N,M),
d1,d2,
not(build_vis1_array(1,1,N,M)),
(cnt_white_cells(I,J,N,M);!),
findall(Num,wcs(Num),L1),nth1(1,L1,White_cells_num),
findall(Num1,bcs(Num1),L2),nth1(1,L2,Black_cells_num),% L2 empty
Total1 is White_cells_num+Black_cells_num,
Total2 is N*M,
Total1==Total2,
loopOnElements(1,1,Acc_sol1,N,M), %! always return true
loopOnElements1(1,1,Acc_sol2,N,M),
Acc_sol1==1,Acc_sol2==1,
retract(found(0)),
assert(found(1)),
storeSolution(1,1,N,M).
%..................Mark Same Cells From Left & Right & Up & Down.....................


markSameCellsFromUp(I,J,UI,Target,CallNumber):-
UI>=I,!;
getCellNumber(UI,J,Number),find_bit(UI,J,Bit),UI1 is UI+1,Number==Target,Bit==0,change_bit(UI,J,1),addPair(CallNumber,UI,J),increase_black_cell_num(),markSameCellsFromUp(I,J,UI1,Target,CallNumber),! ; 
UI1 is UI+1,markSameCellsFromUp(I,J,UI1,Target,CallNumber).

markSameCellsFromDown(I,J,DI,Target,CallNumber,N):-
DI>N,!;
getCellNumber(DI,J,Number),find_bit(DI,J,Bit),DI1 is DI+1, Number==Target,Bit==0,change_bit(DI,J,1),addPair(CallNumber,DI,J),increase_black_cell_num(),markSameCellsFromDown(I,J,DI1,Target,CallNumber,N),! ; 
DI1 is DI+1,markSameCellsFromDown(I,J,DI1,Target,CallNumber,N).

markSameCellsFromLeft(I,J,LJ,Target,CallNumber):-
LJ>=J,!;
getCellNumber(I,LJ,Number),find_bit(I,LJ,Bit),LJ1 is LJ+1,Number==Target,Bit==0,change_bit(I,LJ,1),addPair(CallNumber,I,LJ),increase_black_cell_num(),markSameCellsFromLeft(I,J,LJ1,Target,CallNumber),! ; 
LJ1 is LJ+1,markSameCellsFromLeft(I,J,LJ1,Target,CallNumber).

markSameCellsFromRight(I,J,RJ,Target,CallNumber,M):-
RJ>M,!;
getCellNumber(I,RJ,Number),find_bit(I,RJ,Bit),RJ1 is RJ+1,Number==Target,Bit==0,change_bit(I,RJ,1),addPair(CallNumber,I,RJ),increase_black_cell_num(),markSameCellsFromRight(I,J,RJ1,Target,CallNumber,M),!; 
RJ1 is RJ+1,markSameCellsFromRight(I,J,RJ1,Target,CallNumber,M).
%....................................................................................

addPair(I,X,Y):-assert(pair(I,X,Y)),assert(pair(I,backtracking)).
pp(I):-findall(pair(I,X,Y),pair(I,X,Y),L),write(L).
removeMark([]).
removeMark([H|T]):-pair(CallNumber1,I,J) = H,change_bit(I,J,0),decrease_black_cell_num(),removeMark(T).


removeMarkFromPair(CallNumber):-
findall(pair(CallNumber,X,Y),pair(CallNumber,X,Y),L),(removeMark(L);!),retractall(pair(CallNumber,X1,Y1)).

dfs(I,J,N,M,CallNumber):-
findall(Found,found(Found),L1),nth1(1,L1,Found1),Found1==1,!;
N1 is N+1,I>=N1,checkSolution(N,M),!;
%(printSolution1(1,1,N,M),!;!),nl,
find_bit(I,J,Bit),Bit==1,(J1 is J+1,J1=<M,CallNumber1 is CallNumber+1,dfs(I,J1,N,M,CallNumber1),!;N1 is N+1,I1 is I+1,I1=<N1,CallNumber1 is CallNumber+1,dfs(I1,1,N,M,CallNumber1)),!;
find_bit(I,J,Bit),Bit==0,getCellNumber(I,J,Number),I1 is I+1,J1 is J+1,CallNumber1 is CallNumber+1,(markSameCellsFromUp(I,J,1,Number,CallNumber);!),(markSameCellsFromDown(I,J,I1,Number,CallNumber,N);!),(markSameCellsFromLeft(I,J,1,Number,CallNumber);!),
(markSameCellsFromRight(I,J,J1,Number,CallNumber,M);!),
(J1=<M,dfs(I,J1,N,M,CallNumber1),!;dfs(I1,1,N,M,CallNumber1)),
(removeMarkFromPair(CallNumber);!),
retract(pair(CallNumber,backtracking)),
(J1=<M,dfs(I,J1,N,M,CallNumber1),!;dfs(I1,1,N,M,CallNumber1)),
retractall(pair(CallNumber,backtracking)),retractall(pair(CallNumber,X1,Y1)),!;!.


size(Rows,Columns):-assert(sizes(Rows,Columns)),not(build_vis_array(1,1,Rows,Columns)),retractall(bcs(X)),assert(bcs(0)),assert(found(0)).
cell(I,J,Number):-assert(cells(I,J,Number)).


enterElements([H|T],I,J,N,M):-
I=<N,J=<M,assert(cells(I,J,H)),
J1 is J+1,enterElements(T,I,J1,N,M);
I1 is I+1,J==M,enterElements(T,I1,1,N,M).
inputElements([H|T],I,J,N,M):-(enterElements([H|T],I,J,N,M);!).

solve(N,M):-(dfs(1,1,N,M,1),!;!),
write('...................'),nl,
write('Accepted Solution'),nl,
write('...................'),nl,
(printSolution(1,1,N,M),!;!),
write('...................'),nl,
write('Black Cells'),nl,
write('...................'),nl,
findall(black(X,Y),black(X,Y),L),write(L),nl,
write('...................'),nl.

% Tests

% 4 * 4 
% L=[2,2,2,4,1,4,2,3,2,3,2,1,3,4,1,2],inputElements(L,1,1,4,4).
% L=[2,2,4,1,3,1,1,4,2,4,3,2,4,2,1,4],inputElements(L,1,1,4,4).
% L=[4,2,4,3,4,1,1,2,3,1,2,1,4,3,1,3],inputElements(L,1,1,4,4).
% L=[2,4,2,3,1,3,4,2,4,2,3,1,3,2,2,2],inputElements(L,1,1,4,4).
% size(4,4). solve(4,4). 

% 5 * 5
% L=[4,1,5,3,2,1,2,3,5,5,3,4,4,5,1,3,5,1,5,4,5,2,5,1,3],inputElements(L,1,1,5,5).
% size(5,5). solve(5,5). 
