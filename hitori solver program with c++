///BY_Mohammed_ALmasry
#include <bits/stdc++.h>
#include <iomanip>
using namespace std;
typedef  long long ll;
#define Fastio ios_base::sync_with_stdio(false)
#define pi 3.14159265358979323846//pi=acos(-1)
#define read freopen("input.txt","r",stdin)
#define write freopen("output.txt","w",stdout)
#define fi first
#define se second
#define pb push_back
#define pob pop_back
#define f0(i,n) for(ll i=0;i<n;i++)
#define rf0(n,i) for(ll i=n-1;i>=0;i--)
#define f1(i,n) for(ll i=1;i<=n;i++)
#define rf1(n,i) for(ll i=n;i>=1;i--)
#define ff(i,s,e) for(ll i=s;i<=e;i++)
#define rff(i,e,s) for(ll i=e;i>=s;i--)
#define all(v) v.begin(),v.end()
#define mod 1000000007
#define sz size
#define all(X) X.begin(),X.end()
#define memset(X,Y) memset(X,Y,sizeof X)
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pff pair<float,float>
#define pdd pair<double,double>
int dir4[4][2]= {{1,0},{0,1},{-1,0},{0,-1}};
int dir8[8][2]= {{-1,0},{1,0},{0,1},{0,-1},{-1,1},{1,-1},{1,1},{-1,-1}};
int dir8h[8][2]= {{2,1},{-2,-1},{-1,2},{1,-2},{1,2},{-2,1},{2,-1},{-1,-2}};
long double eps=1e-7;
const int N=100;
int n,m;
int cnt_white_cells_num=0;
bool vis[N][N];
void cnt_white_cells(int i,int j,bool vis1[N][N])
{
cnt_white_cells_num++;
vis1[i][j]=1;
f0(i3,4)
{
    int sonx=i+dir4[i3][0],sony=j+dir4[i3][1];
    if(sonx>0&&sonx<=n&&sony>0&&sony<=m)
    {
     if(!vis[sonx][sony]&&!vis1[sonx][sony])
        cnt_white_cells(sonx,sony,vis1);
    }
}
}
int num_black_cell=0;
void dfs(int i,int j,int t[N][N])
{

if(i==n+1)
{
      int x,y;
      f1(i2,n)
      f1(j2,m)
      if(!vis[i2][j2])
      {
      x=i2;
      y=j2;
      break;
      }
      bool vis1[N][N];
      f1(i6,n)
      f1(j6,m)
      vis1[i6][j6]=0;
      cnt_white_cells(x,y,vis1);
      if(cnt_white_cells_num+num_black_cell==n*m)
      {
              bool acc_sol=1;
          f1(i7,n)
          {
          f1(j7,m)
          {
              if(!vis[i7][j7])
              {

              f1(k7,m)
              if(k7!=j7)
              {
              if(t[i7][j7]==t[i7][k7]&&!vis[i7][k7])
              {
                acc_sol=0;
                break;
              }
              }
              f1(k7,n)
              if(k7!=i7)
              if(t[i7][j7]==t[k7][j7]&&!vis[k7][j7])
              {
                acc_sol=0;
                break;
              }
            }

          }
          }
          f1(i7,n)
          f1(j7,m)
          {
              if(j7+1<=m)
              {
                if(vis[i7][j7]==1&&vis[i7][j7+1]==1)
                 {
                 acc_sol=0;
                 break;
                 }
              }
              if(i7+1<=n)
              {
                if(vis[i7][j7]==1&&vis[i7+1][j7]==1)
                 {
                 acc_sol=0;
                 break;
                 }
              }
          }
          if(acc_sol)
          {
              cout<<"Accepted_Solution:\n";
              f1(i4,n)
              {
              f1(j4,m)
              cout<<vis[i4][j4]<<"("<<t[i4][j4]<<") ";
              cout<<"\n";
              }
              exit(0);
          }
      }
      cnt_white_cells_num=0;
      return;
}

if(i>n||i<=0||j<=0||j>m)return;

if(vis[i][j])
{
    if(j+1<=m)
    dfs(i,j+1,t);
    else if(i+1<=n+1)
    dfs(i+1,1,t);
    return;
}

vector<pii>v;
bool backtrack=0;
ff(i1,1,i-1)
    if(t[i][j]==t[i1][j]&&!vis[i1][j])
    {
        vis[i1][j]=1;
        v.pb({i1,j});
        num_black_cell++;
        backtrack=1;
    }
ff(i1,i+1,n)
    if(t[i][j]==t[i1][j]&&!vis[i1][j])
    {
       vis[i1][j]=1;
       v.pb({i1,j});
       num_black_cell++;
       backtrack=1;
    }
ff(j1,1,j-1)
    if(t[i][j]==t[i][j1]&&!vis[i][j1])
    {
        vis[i][j1]=1;
        v.pb({i,j1});
        num_black_cell++;
        backtrack=1;
    }
ff(j1,j+1,m)
    if(t[i][j]==t[i][j1]&&!vis[i][j1])
    {
        vis[i][j1]=1;
        v.pb({i,j1});
        num_black_cell++;
        backtrack=1;
    }

if(j+1<=m)
dfs(i,j+1,t);
else if(i+1<=n+1)
dfs(i+1,1,t);


f0(e1,v.sz())
vis[v[e1].fi][v[e1].se]=0,num_black_cell--;

if(backtrack)
{
if(j+1<=m)
dfs(i,j+1,t);
else if(i+1<=n+1)
dfs(i+1,1,t);
}

}
int main()
{
//read;write;
Fastio;
int a[N][N];
cin>>n>>m;
f1(i,n)
f1(j,m)
cin>>a[i][j];
dfs(1,1,a);
/*
//Tests
4 4
2 2 2 4 1 4 2 3 2 3 2 1 3 4 1 2
4 4
2 2 4 1 3 1 1 4 2 4 3 2 4 2 1 4
4 4
4 2 4 3 4 1 1 2 3 1 2 1 4 3 1 3
4 4
2 4 2 3 1 3 4 2 4 2 3 1 3 2 2 2
5 5
4 1 5 3 2 1 2 3 5 5 3 4 4 5 1 3 5 1 5 4 5 2 5 1 3
5 5
3 3 2 1 5 2 2 4 5 3 3 1 5 3 2 2 4 2 3 5 1 2 3 3 4
5 5
5 1 4 3 4 1 5 4 5 2 4 3 4 1 5 3 5 2 5 5 1 4 5 2 3
5 5
4 3 1 5 5 1 2 5 4 3 4 1 2 3 2 5 3 3 3 4 4 2 4 1 5
5 5
1 5 5 3 4 3 1 3 5 4 4 4 3 3 5 5 5 2 4 3 2 5 4 1 2
5 5
3 3 2 2 4 3 1 5 2 5 5 4 1 2 2 2 2 2 4 3 2 5 4 1 3
5 5
3 4 3 2 1 2 3 5 5 4 4 1 3 5 3 3 3 1 5 5 4 5 4 3 2
5 5
1 5 3 3 1 1 1 4 2 5 4 2 4 5 3 5 4 1 4 4 3 4 2 1 3
5 5
2 3 1 4 5 4 5 2 1 4 3 3 5 4 2 5 4 2 3 4 5 2 3 5 1
5 5
1 2 3 5 3 4 3 3 2 2 5 3 4 1 4 4 1 4 3 4 3 5 5 4 1
5 5
1 1 2 3 1 4 2 8 3 5 1 2 6 4 9 2 2 4 5 6 10 3 6 6 6
*/
}
